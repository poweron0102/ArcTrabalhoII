.data
vet:    .double 0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0, 16.0, 17.0, 18.0, 19.0, 20.0, 21.0, 22.0, 23.0, 24.0, 25.0, 26.0, 27.0, 28.0, 29.0, 30.0, 31.0, 32.0, 33.0, 34.0, 35.0, 36.0, 37.0, 38.0, 39.0, 40.0, 41.0, 42.0, 43.0, 44.0, 45.0, 46.0, 47.0, 48.0, 49.0, 50.0, 51.0, 52.0, 53.0, 54.0, 55.0, 56.0, 57.0, 58.0, 59.0, 60.0, 61.0, 62.0, 63.0, 64.0, 65.0, 66.0, 67.0, 68.0, 69.0, 70.0, 71.0, 72.0, 73.0, 74.0, 75.0, 76.0, 77.0, 78.0, 79.0, 80.0, 81.0, 82.0, 83.0, 84.0, 85.0, 86.0, 87.0, 88.0, 89.0, 90.0, 91.0, 92.0, 93.0, 94.0, 95.0, 96.0, 97.0, 98.0, 99.0, 100.0, 101.0, 102.0, 103.0, 104.0, 105.0, 106.0, 107.0, 108.0, 109.0, 110.0, 111.0, 112.0, 113.0, 114.0, 115.0, 116.0, 117.0, 118.0, 119.0, 120.0, 121.0, 122.0, 123.0, 124.0, 125.0, 126.0, 127.0
    
constant: .double 2.0           ; Define constant value (e.g., 2.0)

.text
main:
    DADDI R3, R0, 8       ; Increment for memory addresses (8 bytes per double word)
    DADDI R1, R0, 1008    ; Initialize R1 with 1024 (initial address)
    DADDI R2, R0, 1008    ; Initialize R2 with 1024 (initial address)
    DADDI R4, R0, 56      ; Offset for unrolling 7 elements per iteration (7 * 8 = 56 bytes)
    L.D F2, constant(R0)  ; Load constant value into F2 (multiplier)
Loop:
    ; Load 7 elements from address R1
    L.D F0, 0(R1)
    L.D F4, -8(R1)
    L.D F6, -16(R1)
    L.D F8, -24(R1)
    L.D F10, -32(R1)
    L.D F12, -40(R1)
    L.D F14, -48(R1)
    ; Load 7 elements from address R2
    L.D F16, 0(R2)
    L.D F18, -8(R2)
    L.D F20, -16(R2)
    L.D F22, -24(R2)
    L.D F24, -32(R2)
    L.D F26, -40(R2)
    L.D F28, -48(R2)
    ; Update R1 and R2 for the next iteration
    DSUB R1, R1, R4
    DSUB R2, R2, R4
    ; Multiply elements by F2
    MUL.D F0, F0, F2
    MUL.D F4, F4, F2
    MUL.D F6, F6, F2
    MUL.D F8, F8, F2
    MUL.D F10, F10, F2
    MUL.D F12, F12, F2
    MUL.D F14, F14, F2
    ; Add corresponding elements from R2
    ADD.D F0, F0, F16
    ADD.D F4, F4, F18
    ADD.D F6, F6, F20
    ADD.D F8, F8, F22
    ADD.D F10, F10, F24
    ADD.D F12, F12, F26
    ADD.D F14, F14, F28
    ; Store the results back to memory
    S.D F0, 56(R2)
    S.D F4, 48(R2)
    S.D F6, 40(R2)
    S.D F8, 32(R2)
    S.D F10, 24(R2)
    S.D F12, 16(R2)
    S.D F14, 8(R2)
; Loop control
BNEZ R1, Loop
HALT